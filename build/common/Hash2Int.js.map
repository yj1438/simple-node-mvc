{"version":3,"sources":["common/Hash2Int.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;AAMA;;;;AAGA,QAAQ,YAAR,GAAuB,UAAS,MAAT,EAAiB,KAAjB,EAAwB;AAC3C,QAAI,aAAJ;AAAA,QACI,UADJ;AAEA,SAAK,OAAO,OAAO,MAAd,EAAsB,IAAI,CAA/B,EAAkC,IAAI,OAAO,MAA7C,EAAqD,GAArD,EAA0D;AACtD,eAAO,OAAO,OAAO,UAAP,CAAkB,CAAlB,CAAd;AACH;AACD,WAAO,QAAS,OAAO,KAAhB,GAAyB,IAAhC;AACH,CAPD;;AASA;;;AAGA,QAAQ,YAAR,GAAuB,UAAS,MAAT,EAAiB,KAAjB,EAAwB;AAC3C,QAAI,aAAJ;AAAA,QACI,UADJ;AAEA,SAAK,OAAO,OAAO,MAAd,EAAsB,IAAI,CAA/B,EAAkC,IAAI,OAAO,MAA7C,EAAqD,GAArD,EAA0D;AACtD,eAAQ,QAAQ,CAAT,GAAe,QAAQ,EAAvB,GAA6B,OAAO,UAAP,CAAkB,CAAlB,CAApC;AACH;AACD,WAAO,QAAS,OAAO,KAAhB,GAAyB,IAAhC;AACA,WAAO,KAAK,GAAL,CAAS,IAAT,CAAP;AACH,CARD;;AAUA;;;;;AAKA,QAAQ,aAAR,GAAwB,UAAS,MAAT,EAAiB,KAAjB,EAAwB;AAC5C,QAAI,OAAO,CAAX;AAAA,QACI,UADJ;AAEA,SAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B;AACI,eAAO,KAAK,IAAL,GAAY,OAAO,UAAP,CAAkB,CAAlB,CAAnB;AADJ,KAEA,OAAO,QAAS,OAAO,KAAhB,GAAyB,IAAhC;AACH,CAND;;AAQA;;;AAGA,QAAQ,OAAR,GAAkB,UAAS,MAAT,EAAiB,KAAjB,EAAwB;AACtC,QAAI,IAAI,QAAR;AAAA,QACI,OAAO,UADX;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC;AACI,eAAO,CAAC,OAAO,OAAO,UAAP,CAAkB,CAAlB,CAAR,IAAgC,CAAvC;AADJ,KAEA,QAAQ,QAAQ,EAAhB;AACA,YAAQ,QAAQ,CAAhB;AACA,YAAQ,QAAQ,CAAhB;AACA,YAAQ,QAAQ,EAAhB;AACA,YAAQ,QAAQ,CAAhB;AACA,WAAO,QAAS,OAAO,KAAhB,GAAyB,IAAhC;AACH,CAXD","file":"common/Hash2Int.js","sourcesContent":["'use strict';\n\n/**\n * hash 散列算法\n * 根据一个字符串生成 range 范围内的一个数\n * 用于数据库均匀分表\n */\n\n/*\n * 加法 HASH\n */\nexports.additiveHash = function(string, range) {\n    let hash,\n        i;\n    for (hash = string.length, i = 0; i < string.length; i++) {\n        hash = hash + string.charCodeAt(i);\n    }\n    return range ? (hash % range) : hash;\n}\n\n/*\n * 位运算 HASH\n */\nexports.rotatingHash = function(string, range) {\n    let hash,\n        i;\n    for (hash = string.length, i = 0; i < string.length; i++) {\n        hash = (hash << 4) ^ (hash >> 28) ^ string.charCodeAt(i);\n    }\n    hash = range ? (hash % range) : hash;\n    return Math.abs(hash);\n}\n\n/*\n * 乘法 HASH\n * 推荐乘数可以是31.131.13131.13131...\n * \n */\nexports.bernsteinHash = function(string, range) {\n    let hash = 0,\n        i;\n    for (i = 0; i < string.length; i++)\n        hash = 31 * hash + string.charCodeAt(i);\n    return range ? (hash % range) : hash;\n}\n\n/*\n * 改进后的 FNVHash\n */\nexports.FNVHash = function(string, range) {\n    let p = 16777619,\n        hash = 2166136261;\n    for (let i = 0; i < string.length; i++)\n        hash = (hash ^ string.charCodeAt(i)) * p;\n    hash += hash << 13;\n    hash ^= hash >> 7;\n    hash += hash << 3;\n    hash ^= hash >> 17;\n    hash += hash << 5;\n    return range ? (hash % range) : hash;\n}"],"sourceRoot":"/source/"}