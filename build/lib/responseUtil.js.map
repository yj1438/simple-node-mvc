{"version":3,"sources":["lib/responseUtil.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,KAAK,QAAQ,IAAR,CAAX;AAAA,IACI,OAAO,QAAQ,MAAR,CADX;AAAA,IAEI,OAAO,QAAQ,MAAR,CAFX;;AAIA,IAAM,YAAY,CAAC,MAAD,EAAS,MAAT,EAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,CAAlB;AAAA,IACI,eAAe,QAAQ,gBAAR,CADnB;AAAA,IAEI,SAAS,QAAQ,WAAR,CAFb;AAGA;;;;;;;AAOA,QAAQ,GAAR,GAAc,UAAU,MAAV,EAAkB,IAAlB,EAAwB,OAAxB,EAAiC;;AAE3C,QAAM,UAAU,KAAK,GAArB;AAAA,QACI,WAAW,KAAK,GADpB;AAAA,QAEI,iBAAiB,QAAQ,OAAR,CAAgB,iBAAhB,CAFrB;AAGA,WAAO,QAAQ,MAAf;AACA,YAAQ,cAAR,IAA0B,aAAa,IAAb,KAAsB,WAAhD;AACA,QAAI,OAAO,IAAP,IAAe,OAAO,cAAP,KAA0B,QAAzC,IAAqD,UAAU,OAAV,CAAmB,IAAnB,IAA2B,CAAC,CAArF,EAAwF;AACpF,YAAI,eAAe,KAAf,CAAqB,aAArB,CAAJ,EAAyC;AACrC,oBAAQ,kBAAR,IAA8B,SAA9B;AACA,qBAAS,SAAT,CAAmB,GAAnB,EAAwB,OAAxB;AACA,mBAAO,IAAP,CAAY,KAAK,aAAL,EAAZ,EAAkC,IAAlC,CAAuC,QAAvC;AACH,SAJD,MAIO,IAAI,eAAe,KAAf,CAAqB,UAArB,CAAJ,EAAsC;AACzC,oBAAQ,kBAAR,IAA8B,MAA9B;AACA,qBAAS,SAAT,CAAmB,GAAnB,EAAwB,OAAxB;AACA,mBAAO,IAAP,CAAY,KAAK,UAAL,EAAZ,EAA+B,IAA/B,CAAoC,QAApC;AACH,SAJM,MAIA;AACH,qBAAS,SAAT,CAAmB,GAAnB,EAAwB,OAAxB;AACA,mBAAO,IAAP,CAAY,QAAZ;AACH;AACJ,KAbD,MAaO;AACH,iBAAS,SAAT,CAAmB,GAAnB,EAAwB,OAAxB;AACA,eAAO,IAAP,CAAY,QAAZ;AACH;AACD,WAAO,EAAP,CAAU,QAAV,EAAmB,SAAS,GAA5B;AACH,CAzBD","file":"lib/responseUtil.js","sourcesContent":["'use strict';\n\nconst fs = require('fs'),\n    path = require('path'),\n    zlib = require('zlib');\n\nconst gzipTypes = ['html', 'json', 'js', 'css', 'xml'],\n    contentTypes = require('./contentTypes'),\n    config = require('../config');\n/**\n* response 方法\n* 主要用于最终数据流的输出\n* 可根据浏览器端进行 deflate or gzip 的压缩\n* https://nodejs.org/api/zlib.html\n*\n*/\nexports.out = function (stream, type, headers) {\n    \n    const request = this.req,\n        response = this.res,\n        acceptEncoding = request.headers['accept-encoding'];\n    type = type || 'html';\n    headers['Content-Type'] = contentTypes[type] || 'text/html';\n    if (config.gzip && typeof acceptEncoding === 'string' && gzipTypes.indexOf (type) > -1) {\n        if (acceptEncoding.match(/\\bdeflate\\b/)) {\n            headers['Content-encoding'] = 'deflate';\n            response.writeHead(200, headers);\n            stream.pipe(zlib.createDeflate()).pipe(response);\n        } else if (acceptEncoding.match(/\\bgzip\\b/)) {\n            headers['Content-encoding'] = 'gzip';\n            response.writeHead(200, headers);\n            stream.pipe(zlib.createGzip()).pipe(response);\n        } else {\n            response.writeHead(200, headers);\n            stream.pipe(response);\n        }\n    } else {\n        response.writeHead(200, headers);\n        stream.pipe(response);\n    }\n    stream.on('finish',response.end);\n};"],"sourceRoot":"/source/"}